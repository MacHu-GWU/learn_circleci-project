# This example demonstrate how to cache a directory or files for future use
#
# reference
# - cache: https://circleci.com/docs/2.0/caching/
# - workspace: https://circleci.com/docs/2.0/workflows/#using-workspaces-to-share-data-among-jobs
version: 2.1

executors:
  python-docker:
    docker:
      - image: cimg/python:3.6.12
  working_directory: /tmp

jobs:
  checkout-source-code:
    executor: python-docker
    steps:
      - run: pwd
      - run: mkdir -p /tmp/repo
      - checkout:
          path: /tmp/repo
      - run: pwd
      - persist_to_workspace:
          root: /tmp/repo
          paths:
            - "*"
  
  setup-python-virtualenv:
    executor: python-docker
    steps:
      - attach_workspace: # restore repository codes, avoid re-checkout
          at: /tmp/repo
      - run: pwd
      - run:
          name: setup python virtualenv
          command: |
            pwd
            virtualenv venv
            source venv/bin/activate
            pip install -r repo/.circleci/cache-dependencies/requirements.txt
      - save_cache:
          key: venv-cache-{{ checksum "repo/.circleci/python/build-test-deploy-example/requirements.txt" }} # dynamic cache key
          paths:
            - venv
  
  run-test:
    executor: python-docker
    steps:
      - attach_workspace: # restore repository codes, avoid re-checkout
          at: /tmp/repo
      - restore_cache: # restore venv cache
          keys:
            - venv-cache-{{ checksum "repo/.circleci/python/build-test-deploy-example/requirements.txt" }} # dynamic cache key
      - run: pwd
      - run: # run some test command
          name: verify if venv exists and dependencies are installed
          command: |
            ls venv/bin
            venv/bin/pip list


workflows:
  my-workflow:
    jobs:
      - checkout-source-code
      - setup-python-virtualenv:
          requires:
            - checkout-source-code
      - run-test:
          requires:
            - setup-python-virtualenv
